class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        // ListNode head=new ListNode(-1113);
        // ListNode temp=head;
        //  if(l1==null || l2==null)
        //  {
        //      return (l1==null)?l2:l1;
        //  }
        //     while(l1!=null && l2!=null)
        //     {
        //         if(l1.val<l2.val)
        //         {
        //             temp.next=l1;
        //             l1=l1.next;
        //             temp=temp.next;
        //         }
        //         else if(l1.val>l2.val)
        //         {
        //             temp.next=l2;
        //             l2=l2.next;
        //             temp=temp.next;
        //         }
        //         else
        //         {
        //             temp.next=l1;
        //             l1=l1.next;
        //             temp=temp.next;
        //             temp.next=l2;
        //             l2=l2.next;
        //             temp=temp.next;
        //          }
        //     }
        //   if (l1 != null) {
        //     temp.next = l1;
        // } else if (l2 != null) {
        //     temp.next = l2;
        // }
        // head=head.next;
        // return head;
        ListNode fakeHead = new ListNode(0);
	ListNode current = fakeHead;

	while (l1 != null || l2 != null) {
		if (l1 == null || (l2 != null && l1.val >= l2.val)) {
			current.next = l2;
			current = l2;
			l2 = l2.next;
		} else {
			current.next = l1;
			current = l1;
			l1 = l1.next;
		}
	}
	return fakeHead.next;
    }
}